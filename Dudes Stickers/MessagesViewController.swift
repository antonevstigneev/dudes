//
//  MessagesViewController.swift
//  Dudes Stickers
//
//  Created by Anton Evstigneev on 04.01.2021.
//

import UIKit
import Messages
import Foundation
import CoreData


class MessagesViewController: MSMessagesAppViewController, UICollectionViewDelegate {
    
    let userDefaults = UserDefaults(suiteName: "group.com.getdudesapp.Dudes.container")!
    let container = CoreDataStack.persistentContainer
    var dudesCollectionView: UICollectionView!
    var dudesDataSource: UICollectionViewDiffableDataSource<Section, MSSticker>!
    var dudesSnapshot: NSDiffableDataSourceSnapshot<Section, MSSticker>!
    var filtersCollectionView: UICollectionView!
    var filtersDataSource: UICollectionViewDiffableDataSource<Int, Int>!
    var swipeCount: Int = 0

    var stickerpacks: [[MSSticker]] = []
    var selectedStickerpack: [MSSticker] = []
    
    enum Section {
        case stickers
    }
    
    @IBOutlet weak var filtersView: UIView!
    @IBOutlet weak var dudePreview: UIImageView!
    var stickersCollectionView: UICollectionView!
    var stickersDataSource: UICollectionViewDiffableDataSource<Section, StickerCell>!
    var stickersSnapshot: NSDiffableDataSourceSnapshot<Section, StickerCell>!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchStickerpacksData()
        configureHierarchy()
        configureDataSource()
        showAllStickers()
        setupSwipeGestures()
    }
    
    func fetchStickerpacksData() {
        let request: NSFetchRequest = Stickerpack.fetchRequest()
        request.relationshipKeyPathsForPrefetching = ["stickers"]
        let sort = NSSortDescriptor(key: "timestamp", ascending: false)
        request.sortDescriptors = [sort]
        do {
            let stickerpacks = try container.viewContext.fetch(request)
            for stickerpack in stickerpacks {
                var stickers: [MSSticker] = []
                for case let sticker as Sticker in stickerpack.stickers!  {
                    let path = "\(stickerpack.id!)/\(sticker.id!).png"
                    let fileManager = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: "group.com.getdudesapp.Dudes.container")
                    guard   let img = UIImage(data: sticker.image!),
                            let url = img.save(at: fileManager!,
                                               pathAndImageName: path) else { return }
                    
                    let sticker = try! MSSticker(contentsOfFileURL: url, localizedDescription: "sticker")
                    stickers.append(sticker)
                }
                self.stickerpacks.append(stickers)
            }
            // get all stickers
            let allStickers = self.stickerpacks.flatMap { $0 }
            self.stickerpacks.append(allStickers)
            
        } catch {
            print("Fetching failed")
        }
    }
    
    func showAllStickers() {
        let firstIndex = IndexPath(row: 0, section: 0)
        filtersCollectionView.selectItem(at: firstIndex, animated: false, scrollPosition: [])
        selectedStickerpack = stickerpacks.last!
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}

/// MARK: - CollectionView layout
extension MessagesViewController {
    func createDudesLayout() -> UICollectionViewLayout {
        let itemSize = NSCollectionLayoutSize(widthDimension: .absolute(120),
                                             heightDimension: .absolute(120))
        let item = NSCollectionLayoutItem(layoutSize: itemSize)

        let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0),
                                              heightDimension: .absolute(120))
        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitem: item, count: 3)
        let spacing = CGFloat(10)
        group.interItemSpacing = .fixed(spacing)
        let section = NSCollectionLayoutSection(group: group)
        section.interGroupSpacing = spacing
        section.contentInsets = NSDirectionalEdgeInsets(top: 20, leading: 10, bottom: 0, trailing: 10)
  
        let layout = UICollectionViewCompositionalLayout(section: section)
        return layout
    }
}



// MARK: - CollectionView dataSource
extension MessagesViewController {
    func configureHierarchy() {
        dudesCollectionView = UICollectionView(frame: CGRect(x: 0, y: 35, width: view.bounds.width, height: view.bounds.height), collectionViewLayout: createDudesLayout())
        dudesCollectionView.delegate = self
        dudesCollectionView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        dudesCollectionView.backgroundColor = .black
        dudesCollectionView.allowsMultipleSelection = true
        dudesCollectionView.showsVerticalScrollIndicator = false
        view.addSubview(dudesCollectionView)
        
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        layout.estimatedItemSize = CGSize(width: 80, height: 35)
        let frame = CGRect(x: 0, y: 0, width: view.bounds.width, height: 50)
        filtersCollectionView = UICollectionView(frame: frame, collectionViewLayout: layout)
        filtersCollectionView.delegate = self
        filtersCollectionView.contentInset = UIEdgeInsets(top: 5, left: 20, bottom: 5, right: 20)
        filtersCollectionView.showsHorizontalScrollIndicator = false
        filtersView.addSubview(filtersCollectionView)
        view.bringSubviewToFront(filtersView)
    }
    
    func configureDataSource() {
        let dudeCellRegistration = UICollectionView.CellRegistration
        <StickerCell, MSSticker> { [self] (cell, indexPath, sticker) in
            cell.stickerView.sticker = selectedStickerpack[indexPath.row]
        }
        
        dudesDataSource = UICollectionViewDiffableDataSource<Section, MSSticker>(collectionView: dudesCollectionView) {
            (collectionView: UICollectionView, indexPath: IndexPath, identifier: MSSticker) -> UICollectionViewCell? in
            
            return collectionView.dequeueConfiguredReusableCell(using: dudeCellRegistration, for: indexPath, item: identifier)
        }
        
        let filterCellRegistration  = UICollectionView.CellRegistration
        <FilterCell, Int> { (cell, indexPath, identifier) in
            if indexPath.row == 0 {
                cell.label.text = "ALL"
            } else {
                let stickerpackTitle = "DUDES-" + String(format: "%02d", self.stickerpacks.count - indexPath.row)
                cell.label.text = stickerpackTitle
            }
            
        }
        
        filtersDataSource = UICollectionViewDiffableDataSource<Int, Int>(collectionView: filtersCollectionView) {
            (collectionView: UICollectionView, indexPath: IndexPath, identifier: Int) -> UICollectionViewCell? in
            
            return collectionView.dequeueConfiguredReusableCell(using: filterCellRegistration, for: indexPath, item: identifier)
        }

        // dudes initial data
        applyDataSnapshot()
        
        // filters initial data
        var filtersSnapshot = NSDiffableDataSourceSnapshot<Int, Int>()
        filtersSnapshot.appendSections([0])
        filtersSnapshot.appendItems(Array(0..<stickerpacks.count))
        filtersDataSource.apply(filtersSnapshot, animatingDifferences: false)
    }
    
    private func applyDataSnapshot() {
        DispatchQueue.main.async() { [self] in
            dudesSnapshot = NSDiffableDataSourceSnapshot<Section, MSSticker>()
            dudesSnapshot.appendSections([.stickers])
            dudesSnapshot.appendItems(selectedStickerpack)
            dudesDataSource.apply(dudesSnapshot, animatingDifferences: true)
        }
    }
}


extension MessagesViewController {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        swipeCount = indexPath.row
        if collectionView == filtersCollectionView {
            if indexPath.row == 0 {
                selectedStickerpack = stickerpacks.last!
            } else {
                selectedStickerpack = stickerpacks[indexPath.row-1]
            }
            applyDataSnapshot()
        }
    }
}


extension MessagesViewController {
    func setupSwipeGestures() {
        let leftSwipe = UISwipeGestureRecognizer(target: self, action: #selector(handleSwipes(_:)))
        let rightSwipe = UISwipeGestureRecognizer(target: self, action: #selector(handleSwipes(_:)))
        
        leftSwipe.direction = .left
        rightSwipe.direction = .right

        view.addGestureRecognizer(leftSwipe)
        view.addGestureRecognizer(rightSwipe)
    }
    
    @objc func handleSwipes(_ sender: UISwipeGestureRecognizer) {
        if sender.direction == .left {
            if swipeCount < stickerpacks.count-1 {
                swipeCount += 1
            } else {
                swipeCount += 0
            }
        }

        if sender.direction == .right {
            if swipeCount > 0 {
                swipeCount -= 1
            } else {
                swipeCount -= 0
            }
        }
        filtersCollectionView.selectItem(at: IndexPath(row: swipeCount, section: 0), animated: true, scrollPosition: .centeredHorizontally)
        if swipeCount == 0 {
            selectedStickerpack = stickerpacks.last!
        } else if swipeCount == stickerpacks.count-1 {
            selectedStickerpack = stickerpacks[swipeCount-1]
        } else {
            selectedStickerpack = stickerpacks[swipeCount-1]
        }
        applyDataSnapshot()
    }
}



// save
extension UIImage {

    func save(at directory: URL,
              pathAndImageName: String,
              createSubdirectoriesIfNeed: Bool = true,
              compressionQuality: CGFloat = 1.0)  -> URL? {
        do {
        
        return save(at: directory.appendingPathComponent(pathAndImageName),
                    createSubdirectoriesIfNeed: createSubdirectoriesIfNeed,
                    compressionQuality: compressionQuality)
        }
    }

    func save(at url: URL,
              createSubdirectoriesIfNeed: Bool = true,
              compressionQuality: CGFloat = 1.0)  -> URL? {
        do {
            if createSubdirectoriesIfNeed {
                try FileManager.default.createDirectory(at: url.deletingLastPathComponent(),
                                                        withIntermediateDirectories: true,
                                                        attributes: nil)
            }
            guard let data = pngData() else { return nil }
            try data.write(to: url)
            return url
        } catch {
            print("-- Error: \(error)")
            return nil
        }
    }
}
